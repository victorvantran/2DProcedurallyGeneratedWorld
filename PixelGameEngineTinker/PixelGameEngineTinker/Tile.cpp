#include "Tile.h"

Tile::Tile()
	: _id( TileIdentity::Void ), _opaque( false ), _borders( 0 )
{
	// setType
}


Tile::~Tile()
{
}


Tile::Tile( TileIdentity id, bool opaque )
	: _id( id ), _opaque( opaque ), _borders( 0 )
{
}


void Tile::setId( TileIdentity id )
{
	this->_id = id;
	return;
}


void Tile::setOpaque( bool opaque )
{
	this->_opaque = opaque;
	return;
}


void Tile::setBorders( std::uint8_t borders )
{
	this->_borders = borders;
}


void Tile::setBorder( TileBorder border )
{
	this->_borders |= 1 << ( std::uint8_t )border;
}


void Tile::unsetBorder( TileBorder border )
{
	this->_borders &= ~( 1 << ( std::uint8_t )border );
}


TileIdentity Tile::getId() const
{
	return this->_id;
}


bool Tile::getOpaque() const
{
	return this->_opaque;
}


std::uint8_t Tile::getBorders() const
{
	return this->_borders;
}


bool Tile::getBorder( TileBorder border ) const
{
	return ( ( this->_borders ) >> ( std::uint8_t )border ) & 1;
}


std::uint8_t Tile::getBordersDecalIndex() const
{
	return Tile::_borderValueToDecalIndex.at( this->_borders );
}


bool Tile::exists() const
{
	return this->_id != TileIdentity::Void;
}


bool Tile::isVoid() const
{
	return this->_id == TileIdentity::Void;
}


bool Tile::isEmpty() const
{
	return false;
}


bool Tile::isBlock() const
{
	return false;
}


bool Tile::isOneWayPlatform() const
{
	return false;
}


bool Tile::isObstacle() const
{
	return false;
}


bool Tile::isGround() const
{
	return false;
}


bool Tile::isLedge() const
{
	return false;
}



void Tile::clear()
{
	this->_id = TileIdentity::Void;
	//this->_TileType = TileType::Empty;
	return;
}


const std::map<std::uint8_t, std::uint8_t> Tile::_borderValueToDecalIndex =
{
	{ 0, 46 }, { 1, 46 }, { 2, 45 }, { 3, 45 }, { 4, 46 }, { 5, 46 }, { 6, 45 }, { 7, 45 }, { 8, 43 }, { 9, 43 }, { 10, 44 }, { 11, 44 }, { 12, 43 }, { 13, 43 }, { 14, 42 }, { 15, 42 },
	{ 16, 46 }, { 17, 46 }, { 18, 45 }, { 19, 45 }, { 20, 46 }, { 21, 46 }, { 22, 45 }, { 23, 45 }, { 24, 43 }, { 25, 43 }, { 26, 44 }, { 27, 44 }, { 28, 43 }, { 29, 43 }, { 30, 42 }, { 31, 42 },
	{ 32, 38 }, { 33, 38 }, { 34, 37 }, { 35, 37 }, { 36, 38 }, { 37, 38 }, { 38, 37 }, { 39, 37 }, { 40, 40 }, { 41, 40 }, { 42, 41 }, { 43, 41 }, { 44, 40 }, { 45, 40 }, { 46, 39 }, { 47, 39 },
	{ 48, 38 }, { 49, 38 }, { 50, 37 }, { 51, 37 }, { 52, 38 }, { 53, 38 }, { 54, 37 }, { 55, 37 }, { 56, 35 }, { 57, 35 }, { 58, 36 }, { 59, 36 }, { 60, 35 }, { 61, 35 }, { 62, 34 }, { 63, 34 },
	{ 64, 46 }, { 65, 46 }, { 66, 45 }, { 67, 45 }, { 68, 46 }, { 69, 46 }, { 70, 45 }, { 71, 45 }, { 72, 43 }, { 73, 43 }, { 74, 44 }, { 75, 44 }, { 76, 43 }, { 77, 43 }, { 78, 42 }, { 79, 42 },
	{ 80, 46 }, { 81, 46 }, { 82, 45 }, { 83, 45 }, { 84, 46 }, { 85, 46 }, { 86, 45 }, { 87, 45 }, { 88, 43 }, { 89, 43 }, { 90, 44 }, { 91, 44 }, { 92, 43 }, { 93, 43 }, { 94, 42 }, { 95, 42 },
	{ 96, 38 }, { 97, 38 }, { 98, 37 }, { 99, 37 }, { 100, 38 }, { 101, 38 }, { 102, 37 }, { 103, 37 }, { 104, 40 }, { 105, 40 }, { 106, 41 }, { 107, 41 }, { 108, 40 }, { 109, 40 }, { 110, 39 }, { 111, 39 },
	{ 112, 38 }, { 113, 38 }, { 114, 37 }, { 115, 37 }, { 116, 38 }, { 117, 38 }, { 118, 37 }, { 119, 37 }, { 120, 35 }, { 121, 35 }, { 122, 36 }, { 123, 36 }, { 124, 35 }, { 125, 35 }, { 126, 34 }, { 127, 34 },
	{ 128, 20 }, { 129, 20 }, { 130, 19 }, { 131, 18 }, { 132, 20 }, { 133, 20 }, { 134, 19 }, { 135, 18 }, { 136, 15 }, { 137, 15 }, { 138, 17 }, { 139, 16 }, { 140, 15 }, { 141, 15 }, { 142, 14 }, { 143, 13 },
	{ 144, 20 }, { 145, 20 }, { 146, 18 }, { 147, 18 }, { 148, 20 }, { 149, 20 }, { 150, 19 }, { 151, 18 }, { 152, 15 }, { 153, 15 }, { 154, 17 }, { 155, 16 }, { 156, 15 }, { 157, 15 }, { 158, 14 }, { 159, 13 },
	{ 160, 28 }, { 161, 28 }, { 162, 27 }, { 163, 26 }, { 164, 28 }, { 165, 28 }, { 166, 27 }, { 167, 26 }, { 168, 31 }, { 169, 31 }, { 170, 33 }, { 171, 32 }, { 172, 31 }, { 173, 31 }, { 174, 30 }, { 175, 29 },
	{ 176, 28 }, { 177, 28 }, { 178, 27 }, { 179, 26 }, { 180, 28 }, { 181, 28 }, { 182, 27 }, { 183, 26 }, { 184, 23 }, { 185, 23 }, { 186, 25 }, { 187, 24 }, { 188, 23 }, { 189, 23 }, { 190, 22 }, { 191, 21 },
	{ 192, 20 }, { 193, 20 }, { 194, 19 }, { 195, 18 }, { 196, 20 }, { 197, 20 }, { 198, 19 }, { 199, 18 }, { 200, 15 }, { 201, 15 }, { 202, 17 }, { 203, 16 }, { 204, 15 }, { 205, 15 }, { 206, 14 }, { 207, 13 },
	{ 208, 20 }, { 209, 20 }, { 210, 19 }, { 211, 18 }, { 212, 20 }, { 213, 20 }, { 214, 19 }, { 215, 18 }, { 216, 15 }, { 217, 15 }, { 218, 17 }, { 219, 16 }, { 220, 15 }, { 221, 15 }, { 222, 14 }, { 223, 13 },
	{ 224, 7 }, { 225, 7 }, { 226, 6 }, { 227, 5 }, { 228, 7 }, { 229, 7 }, { 230, 6 }, { 231, 5 }, { 232, 10 }, { 233, 10 }, { 234, 12 }, { 235, 11 }, { 236, 10 }, { 237, 10 }, { 238, 9 }, { 239, 8 },
	{ 240, 7 }, { 241, 7 }, { 242, 6 }, { 243, 5 }, { 244, 7 }, { 245, 7 }, { 246, 6 }, { 247, 5 }, { 248, 2 }, { 249, 2 }, { 250, 4 }, { 251, 3 }, { 252, 2 }, { 253, 2 }, { 254, 1 }, { 255, 0 }
};